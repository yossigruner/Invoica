name: Build

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  frontend:
    name: Frontend Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: 'frontend/package-lock.json'
    
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci
      
    # - name: Type check
    #   working-directory: ./frontend
    #   run: npm run type-check
      
    # - name: Lint frontend
    #   working-directory: ./frontend
    #   run: npm run lint
      
    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      env:
        VITE_SUPABASE_URL: ${{ secrets.VITE_SUPABASE_URL }}
        VITE_SUPABASE_ANON_KEY: ${{ secrets.VITE_SUPABASE_ANON_KEY }}

  backend:
    name: Backend Build
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: './server/package-lock.json'
    
    - name: Debug directory structure
      run: |
        pwd
        ls -la
        ls -la server || echo "server directory not found"
        
    - name: Install server dependencies
      run: |
        cd server
        npm ci
      
    # - name: Lint backeservernd
    #   working-directory: ./server
    #   run: npm run lint
      
    - name: Build server
      run: |
        cd server
        npm run build
      env:
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }} 